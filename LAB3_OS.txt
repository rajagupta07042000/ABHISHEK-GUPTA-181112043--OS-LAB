1.
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{

	int pid = fork();
	if (pid > 0)
	{
		printf("Parent process\n");
		printf("ID : %d\n\n",getpid());
	}
	else if (pid == 0)
	{
		printf("Child process\n");
		printf("ID: %d\n",getpid());
		printf("Parent -ID: %d\n\n",getppid());

		sleep(10);
		printf("\nChild process \n");
		printf("ID: %d\n",getpid());
		printf("Parent -ID: %d\n",getppid());
	}
	else
	{
		printf("Failed to create child process");
	}
	
	return 0;
}
2.
#include<stdio.h>

main()
{
    int id;
    id=fork();

    if(id>0)
    {
        printf("Parent will sleep");
        sleep(10);
    }
    if(id==0)
        printf("I am child");
}
3.
#include <unistd.h> 
#include <stdio.h> 
  
int main() 
{ 
    int n1 = fork(); 
    int n2 = fork(); 
  
    if (n1 > 0 && n2 > 0) { 
        printf("parent\n"); 
        printf("%d %d \n", n1, n2); 
        printf(" my id is %d \n", getpid()); 
    } 
    else if (n1 == 0 && n2 > 0) 
    { 
        printf("First child\n"); 
        printf("%d %d \n", n1, n2); 
        printf("my id is %d  \n", getpid()); 
    } 
    else if (n1 > 0 && n2 == 0) 
    { 
        printf("Second child\n"); 
        printf("%d %d \n", n1, n2); 
        printf("my id is %d  \n", getpid()); 
    } 
    else { 
        printf("third child\n"); 
        printf("%d %d \n", n1, n2); 
        printf(" my id is %d \n", getpid()); 
    } 
    return 0; 
} 